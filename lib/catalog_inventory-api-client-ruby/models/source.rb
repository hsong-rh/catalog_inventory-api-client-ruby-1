=begin
#Catalog Inventory

#Catalog Inventory

The version of the OpenAPI document: 1.0.0
Contact: support@redhat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'date'

module CatalogInventoryApiClient
  class Source
    attr_accessor :archived_at

    attr_accessor :created_at

    # ID of the resource
    attr_accessor :id

    attr_accessor :info

    attr_accessor :mqtt_client_id

    attr_accessor :enabled

    attr_accessor :refresh_state

    attr_accessor :bytes_received

    attr_accessor :bytes_sent

    attr_accessor :refresh_started_at

    attr_accessor :refresh_finished_at

    attr_accessor :availability_status

    attr_accessor :last_successful_refresh_at

    attr_accessor :last_checked_at

    attr_accessor :last_available_at

    attr_accessor :uid

    attr_accessor :updated_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'archived_at' => :'archived_at',
        :'created_at' => :'created_at',
        :'id' => :'id',
        :'info' => :'info',
        :'mqtt_client_id' => :'mqtt_client_id',
        :'enabled' => :'enabled',
        :'refresh_state' => :'refresh_state',
        :'bytes_received' => :'bytes_received',
        :'bytes_sent' => :'bytes_sent',
        :'refresh_started_at' => :'refresh_started_at',
        :'refresh_finished_at' => :'refresh_finished_at',
        :'availability_status' => :'availability_status',
        :'last_successful_refresh_at' => :'last_successful_refresh_at',
        :'last_checked_at' => :'last_checked_at',
        :'last_available_at' => :'last_available_at',
        :'uid' => :'uid',
        :'updated_at' => :'updated_at'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'archived_at' => :'DateTime',
        :'created_at' => :'DateTime',
        :'id' => :'String',
        :'info' => :'Object',
        :'mqtt_client_id' => :'String',
        :'enabled' => :'Boolean',
        :'refresh_state' => :'String',
        :'bytes_received' => :'Integer',
        :'bytes_sent' => :'Integer',
        :'refresh_started_at' => :'DateTime',
        :'refresh_finished_at' => :'DateTime',
        :'availability_status' => :'String',
        :'last_successful_refresh_at' => :'DateTime',
        :'last_checked_at' => :'DateTime',
        :'last_available_at' => :'DateTime',
        :'uid' => :'String',
        :'updated_at' => :'DateTime'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CatalogInventoryApiClient::Source` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CatalogInventoryApiClient::Source`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'archived_at')
        self.archived_at = attributes[:'archived_at']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'info')
        self.info = attributes[:'info']
      end

      if attributes.key?(:'mqtt_client_id')
        self.mqtt_client_id = attributes[:'mqtt_client_id']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      else
        self.enabled = false
      end

      if attributes.key?(:'refresh_state')
        self.refresh_state = attributes[:'refresh_state']
      end

      if attributes.key?(:'bytes_received')
        self.bytes_received = attributes[:'bytes_received']
      end

      if attributes.key?(:'bytes_sent')
        self.bytes_sent = attributes[:'bytes_sent']
      end

      if attributes.key?(:'refresh_started_at')
        self.refresh_started_at = attributes[:'refresh_started_at']
      end

      if attributes.key?(:'refresh_finished_at')
        self.refresh_finished_at = attributes[:'refresh_finished_at']
      end

      if attributes.key?(:'availability_status')
        self.availability_status = attributes[:'availability_status']
      end

      if attributes.key?(:'last_successful_refresh_at')
        self.last_successful_refresh_at = attributes[:'last_successful_refresh_at']
      end

      if attributes.key?(:'last_checked_at')
        self.last_checked_at = attributes[:'last_checked_at']
      end

      if attributes.key?(:'last_available_at')
        self.last_available_at = attributes[:'last_available_at']
      end

      if attributes.key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^\d+$/)
      if !@id.nil? && @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@id.nil? && @id !~ Regexp.new(/^\d+$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      pattern = Regexp.new(/^\d+$/)
      if !id.nil? && id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          archived_at == o.archived_at &&
          created_at == o.created_at &&
          id == o.id &&
          info == o.info &&
          mqtt_client_id == o.mqtt_client_id &&
          enabled == o.enabled &&
          refresh_state == o.refresh_state &&
          bytes_received == o.bytes_received &&
          bytes_sent == o.bytes_sent &&
          refresh_started_at == o.refresh_started_at &&
          refresh_finished_at == o.refresh_finished_at &&
          availability_status == o.availability_status &&
          last_successful_refresh_at == o.last_successful_refresh_at &&
          last_checked_at == o.last_checked_at &&
          last_available_at == o.last_available_at &&
          uid == o.uid &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [archived_at, created_at, id, info, mqtt_client_id, enabled, refresh_state, bytes_received, bytes_sent, refresh_started_at, refresh_finished_at, availability_status, last_successful_refresh_at, last_checked_at, last_available_at, uid, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        CatalogInventoryApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
