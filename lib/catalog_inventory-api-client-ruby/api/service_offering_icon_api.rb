=begin
#Catalog Inventory

#Catalog Inventory

The version of the OpenAPI document: 1.0.0
Contact: support@redhat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'cgi'

module CatalogInventoryApiClient
  class ServiceOfferingIconApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List ServiceOfferingIcons
    # Returns an array of ServiceOfferingIcon objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @option opts [Object] :filter Filter for querying collections.
    # @option opts [Object] :sort_by The list of attribute and order to sort the result set by.
    # @return [ServiceOfferingIconsCollection]
    def list_service_offering_icons(opts = {})
      data, _status_code, _headers = list_service_offering_icons_with_http_info(opts)
      data
    end

    # List ServiceOfferingIcons
    # Returns an array of ServiceOfferingIcon objects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @option opts [Object] :filter Filter for querying collections.
    # @option opts [Object] :sort_by The list of attribute and order to sort the result set by.
    # @return [Array<(ServiceOfferingIconsCollection, Integer, Hash)>] ServiceOfferingIconsCollection data, response status code and response headers
    def list_service_offering_icons_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceOfferingIconApi.list_service_offering_icons ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ServiceOfferingIconApi.list_service_offering_icons, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ServiceOfferingIconApi.list_service_offering_icons, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ServiceOfferingIconApi.list_service_offering_icons, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/service_offering_icons'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ServiceOfferingIconsCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['UserSecurity']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceOfferingIconApi#list_service_offering_icons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ServiceOfferingIcon
    # Returns a ServiceOfferingIcon object
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [ServiceOfferingIcon]
    def show_service_offering_icon(id, opts = {})
      data, _status_code, _headers = show_service_offering_icon_with_http_info(id, opts)
      data
    end

    # Show an existing ServiceOfferingIcon
    # Returns a ServiceOfferingIcon object
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceOfferingIcon, Integer, Hash)>] ServiceOfferingIcon data, response status code and response headers
    def show_service_offering_icon_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceOfferingIconApi.show_service_offering_icon ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ServiceOfferingIconApi.show_service_offering_icon"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling ServiceOfferingIconApi.show_service_offering_icon, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/service_offering_icons/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ServiceOfferingIcon' 

      # auth_names
      auth_names = opts[:auth_names] || ['UserSecurity']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceOfferingIconApi#show_service_offering_icon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show an existing ServiceOfferingIcon IconData
    # Returns a ServiceOfferingIcon IconData
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [File]
    def show_service_offering_icon_icon_data(id, opts = {})
      data, _status_code, _headers = show_service_offering_icon_icon_data_with_http_info(id, opts)
      data
    end

    # Show an existing ServiceOfferingIcon IconData
    # Returns a ServiceOfferingIcon IconData
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def show_service_offering_icon_icon_data_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceOfferingIconApi.show_service_offering_icon_icon_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ServiceOfferingIconApi.show_service_offering_icon_icon_data"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling ServiceOfferingIconApi.show_service_offering_icon_icon_data, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/service_offering_icons/{id}/icon_data'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['UserSecurity']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceOfferingIconApi#show_service_offering_icon_icon_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
